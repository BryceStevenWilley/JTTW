/* All numbers in in-game meters unless stated otherwise. */

{ "levelName" : String,
  "nextLevelName" : String, // This is blank on the final level.
  "levelEndX" : double, // The X position of where the level officially ends.
  "mToPixel" : double, // The number of pixels in a meter. For example, 80 = 80 px per meter.
  "background" : {        
    "imageName" : String, 
    "width" : double,     // The width of the level.
    "height" : double     // The height of the level.
    },
  "platforms" : [ {
    "imageName" : String,
    "centerX" : double,
    "centerY" : double,
    "imageSizeWidth" : double,
    "imageSizeHeight" : double,
    "disappears" : boolean,    // Whether the platform should disappear from under the player or not.
    "moveable" : boolean, // Whether a still or moving platform.
    /** IF MOVEABLE **/
    "endX" : double,
    "endY" : double,
    "velocity" : double,
    /** IF BOX COORDINATES **/
    "collisionWidth", double,
    "collisionHeight", double,
    /** ELSE IF POLYGON COORDINATES **/
    "collisionPoints" : [ {
        "x" : double,
        "y" : double
        },
        ...       
    ],
    /** END **/
    "sinkable" : boolean,
    /** IF SINKABLE **/
    "springCK" : double,  // Spring constant k.
    "climbable" : boolean
    ],
/*
 * For the below in-game controllable characters and NPCs, their 
 * collisionbox, width, height, and images are defined in [cocos, meters] coordinates
 */
  "characters" : {
    "Monkey" : {     
      "present" : bool,
      "startingXPos" : double,
      "startingYPos" : double
     },
    ...
    },
  "npcs" : [ {
      "name" : String,
      "imageName" : String,
      "startingXPos" : double,
      "startingYPos" : double
  }
  ],
  "interactables" : {
      "boulders" : [ {
        "imageName" : String,
        "centerX" : double,
        "centerY" : double,
        "type" : String // Must either be polygon or circle for now
        /** IF type == POLYGON **/
       "collisionPoints" : [ {
            "x" : double,
            "y" : double
            },
           ...
        ],
        /** ELSE IF type == CIRCLE **/
        "radius" : double,
        /** END **/
        "mass" : double // should be in the range of 1_000 for smaller boulders to 10_000 for larger ones. Will have
                        // to playtest extensively.
      },
      ...
      ],
      "goldenPegs" : [ {
        "imageName" : String,
        "centerX" : double,
        "centerY" : double,        
        "collisionPoints" : [ { // I'm assuming four points, so that the box can be tilted if needed
          "x" : double,
          "y" : double
        },
        ...
        ]
       },
       ...       
       ]
    },
    "terrain" : {
      "wind" : [ {
        "directionX" : double,  // Strength of wind is now determined by directino vector.
        "directionY" : double,
        "collisionPoints" : [ { // Area affected by wind. Polygonal. 
          "x" : double,
          "y" : double
          },
          ...
        }
        ]
      },
      ...
      ]
    },
  "traps" : [ { // I am not sure what traps need.
    "imageName" : String,
    "centerX" : double,
    "centerY" : double,
    },
    ...
  ],
  "vines" : [ {
    "imageName" : String,"
    "swingCenterX" : double, // The center point that the swinging swings around.
    "swingCenterY" : double,
    "length" : double,
    "arcLimit" : double  // How big an arc it can make. degrees? radians? I don't know.
  },
  ...
  ]
  "respawnPs" : [ {
    "xPos" : double,  // If the player is closest to this x coordinate, respawn at the specified coordinates.
    "respawnX" : double,
    "respawnY" : double
    },
    ...
   ]
}
    
