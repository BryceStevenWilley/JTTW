/* All numbers in in-game meters unless stated otherwise. */

{ "levelName" : String,
  "nextLevelName" : String, // This is blank on the final level.
  "levelEndX" : double, // The X position of where the level officially ends.
  "levelEndY" : double,
  "xGreater" : boolean, // True if the EOL is triggered walking [right] of it.
  "yGreater" : boolean, // True if the EOL is triggered reaching a height [above] it.
  "mToPixel" : double, // The number of pixels in a meter. For example, 80 = 80 px per meter.
  "background" : {        
    "imageName" : String, 
    "width" : double,     // The width of the level.
    "height" : double     // The height of the level.
    },
  "platforms" : [ {
    "imageName" : String,
    "centerX" : double,
    "centerY" : double,
    "imageSizeWidth" : double,
    "imageSizeHeight" : double,
    "disappears" : boolean,    // Whether the platform should disappear from under the player or not.
    "moveable" : boolean, // Whether a still or moving platform.
    /** IF MOVEABLE **/
    "endX" : double,
    "endY" : double,
    "velocity" : double,
    /** IF BOX COORDINATES **/
    "collisionWidth", double,
    "collisionHeight", double,
    /** ELSE IF POLYGON COORDINATES **/
    "collisionPoints" : [ {
        "x" : double,
        "y" : double
        },
        ...       
    ],
    /** END **/
    "sinkable" : boolean,
    /** IF SINKABLE **/
    "springCK" : double,  // Spring constant k.
    "climbable" : boolean
    ],
/*
 * For the below in-game controllable characters and NPCs, their 
 * collisionbox, width, height, and images are defined in [cocos, meters] coordinates
 */
  "characters" : {
    "Monkey" : {     
      "present" : bool,
      "startingXPos" : double,
      "startingYPos" : double
     },
    ...
    },
  "npcs" : [ {
      "name" : String,
      "imageName" : String,
      "startingXPos" : double,
      "startingYPos" : double
  }
  ],
  "interactables" : {
      "boulders" : [
        {
          "id" : int, // unique
          "imageName" : String,
          "centerX" : double,
          "centerY" : double,
          "type" : String // Must either be polygon or circle for now
          /** IF type == POLYGON **/
         "points" : [ {
            "x" : double,
            "y" : double
            },
            ...
          ],
          /** ELSE IF type == CIRCLE **/
          "radius" : double,
          /** END **/
          "mass" : double // should be in the range of 1_000 for smaller boulders to 10_000 for larger ones. Will have
                        // to playtest extensively.
        },
        ...
      ],
      "boulderJoints" : [
          {
             "id1" : int, //id of boulder 1
             "id2" : int, //id of boulder 2
             "anchor1x": double, // the x, y offset from the center of boulder 1
             "anchor1y": double,
             "anchor2x": double, // the x, y offset from the center of boulder 2
             "anchor2y": double,
          }
      ]
      "goldenPegs" : [ {
        "imageName" : String,
        "centerX" : double,
        "centerY" : double,        
        "collisionPoints" : [ { // I'm assuming four points, so that the box can be tilted if needed
          "x" : double,
          "y" : double
        },
        ...
        ]
       },
       ...       
       ]
    },
    "terrain" : {
      "wind" : [ {
        "directionX" : double,  // Strength of wind is now determined by directino vector.
        "directionY" : double,
        "collisionPoints" : [ { // Area affected by wind. Polygonal. 
          "x" : double,
          "y" : double
          },
          ...
        }
        ]
      },
      ...
      ]
    },
  "traps" : [ { // Specifically, for cage traps that fall on top of you.
    "imageName" : String,
    "centerX" : double,
    "centerY" : double,
    "density" : double, // density instead of mass b/c there are different parts, varies from >= 0.0, normalized at 1.0. 
    "bounciness": double, // normalized at 1.0 too
    "friction" : double, // normalized at 1.0 too.
    "wallThickness" : double, // thickness of the trap wall.
    "trapWidth" : double, // distance from center of left trap wall to center of right wall
    "trapHeight" : double, // distance from top to bottom of the trap
    "offset" : double, // the y-axis offset of your center of the trap body compared to the center of the trap image
    "imageWidth" : double, // width of the image, should be a little bigger than trapWidth
    "imageHeight" : doublue // height of the image, should be a little taller than trapHeight.
    },
    ...
  ],
  "vines" : [ {
    "imageName" : String,"
    "swingCenterX" : double, // The center point that the swinging swings around.
    "swingCenterY" : double,
    "length" : double,
    "arcLimit" : double  // How big an arc it can make. radians
    "startingVelocity": double // starting speed, in radians.
  },
  ...
  ]
  "respawnPoints" : [ {    
    "x" : double,
    "y" : double
    },
    ...
   ]
}
    
